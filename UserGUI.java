/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package puppersdaa;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JOptionPane;

/**
 *
 * @author Ignac
 */
public class UserGUI extends javax.swing.JFrame {

    /**
     * Creates new form PuppersGUI
     */
    public UserGUI() {
        initComponents();
        hideAllPaths();
        setupWindowListener();
        centerWindow();
    }   
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        destinationDrop = new javax.swing.JComboBox<>();
        sourceDrop = new javax.swing.JComboBox<>();
        MainGateSouvenir = new javax.swing.JLabel();
        InfoDeskMainGate = new javax.swing.JLabel();
        InfoDeskLabHigh = new javax.swing.JLabel();
        InfoDeskGym = new javax.swing.JLabel();
        InfoDeskFoodTech = new javax.swing.JLabel();
        InfoDeskFAMO = new javax.swing.JLabel();
        InfoDeskEngRes = new javax.swing.JLabel();
        InfoDeskEast = new javax.swing.JLabel();
        InfoDeskCharlie = new javax.swing.JLabel();
        InfoDeskChapel = new javax.swing.JLabel();
        InfoDeskCHK = new javax.swing.JLabel();
        InfoDeskAmphi = new javax.swing.JLabel();
        InfoDeskAlumni = new javax.swing.JLabel();
        InfoDeskSouvenirShop = new javax.swing.JLabel();
        InfoDeskOval = new javax.swing.JLabel();
        InfoDeskObelisk = new javax.swing.JLabel();
        InfoDeskWestWing = new javax.swing.JLabel();
        InfoDeskSouthWing = new javax.swing.JLabel();
        InfoDeskTennisCourt = new javax.swing.JLabel();
        InfoDeskSchoolSupplies = new javax.swing.JLabel();
        InfoDeskPrintingPress = new javax.swing.JLabel();
        InfoDeskLibrary = new javax.swing.JLabel();
        InfoDeskVisitorsLounge = new javax.swing.JLabel();
        InfoDeskSampaguitaCanteen = new javax.swing.JLabel();
        InfoDeskPumpingStation = new javax.swing.JLabel();
        InfoDeskLinearPark = new javax.swing.JLabel();
        InfoDeskPropertySupply = new javax.swing.JLabel();
        InfoDeskNutritionFoodScience = new javax.swing.JLabel();
        MainGateOval = new javax.swing.JLabel();
        MainGateCHK = new javax.swing.JLabel();
        MainGatePool = new javax.swing.JLabel();
        MainGateLagoon = new javax.swing.JLabel();
        MainGateAmphi = new javax.swing.JLabel();
        MainGateMainDome = new javax.swing.JLabel();
        MainGateChapel = new javax.swing.JLabel();
        MainGateEast = new javax.swing.JLabel();
        MainGateWest = new javax.swing.JLabel();
        MainGateSouth = new javax.swing.JLabel();
        MainGateTennisCourt = new javax.swing.JLabel();
        MainGateGym = new javax.swing.JLabel();
        MainGateSchoolSupplies = new javax.swing.JLabel();
        MainGatePrinting = new javax.swing.JLabel();
        MainGateLibrary = new javax.swing.JLabel();
        MainGateCharlie = new javax.swing.JLabel();
        MainGateVisitor = new javax.swing.JLabel();
        MainGateEngRes = new javax.swing.JLabel();
        MainGateSampaguita = new javax.swing.JLabel();
        MainGateLinearPark = new javax.swing.JLabel();
        MainGateNutri = new javax.swing.JLabel();
        MainGateObelisk = new javax.swing.JLabel();
        MainGateFoodTech = new javax.swing.JLabel();
        MainGateAlumni = new javax.swing.JLabel();
        MainGateLabHigh = new javax.swing.JLabel();
        MainGatePumping = new javax.swing.JLabel();
        MainGateFAMO = new javax.swing.JLabel();
        frameBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PUPPERS");
        setPreferredSize(new java.awt.Dimension(1245, 710));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setBackground(new java.awt.Color(221, 87, 70));
        jButton1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(254, 250, 246));
        jButton1.setText("Search");
        jButton1.setBorder(null);
        jButton1.setDefaultCapable(false);
        jButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 187, 70, 20));

        jButton2.setBackground(new java.awt.Color(221, 87, 70));
        jButton2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(254, 250, 246));
        jButton2.setText("Information");
        jButton2.setBorder(null);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 610, -1, -1));

        jButton3.setBackground(new java.awt.Color(221, 87, 70));
        jButton3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(254, 250, 246));
        jButton3.setText("Route");
        jButton3.setBorder(null);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 610, -1, -1));

        destinationDrop.setBackground(new java.awt.Color(254, 250, 246));
        destinationDrop.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        destinationDrop.setForeground(new java.awt.Color(90, 90, 90));
        destinationDrop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose the destination", "Main Gate", "Information Desk", "Visitor's Lounge", "Souvenir Shop", "Oval", "Obelisk", "Pool", "College of Human Kinetics", "Lagoon", "Amphitheater", "Main Dome", "Chapel", "East Wing", "West Wing", "South Wing", "Tahanan ng Alumni", "Tennis Court", "Gymnasium", "School Supplies and Printing Bldg.", "Printing Press", "Ninoy Aquino Library and Learning Resource Center", "Property and Supply Office Bldg", "Charlie del Rosario Bldg.", "Engineering and Research Center", "Sampaguita Canteen", "Pumping Station", "Food Tech Research Center", "FAMO", "Linear Park", "Laboratory High" }));
        getContentPane().add(destinationDrop, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 130, 230, 38));

        sourceDrop.setBackground(new java.awt.Color(254, 250, 246));
        sourceDrop.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        sourceDrop.setForeground(new java.awt.Color(90, 90, 90));
        sourceDrop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose the starting location", "Main Gate", "Information Desk", "Visitor's Lounge", "Souvenir Shop", "Oval", "Obelisk", "Pool", "College of Human Kinetics", "Lagoon", "Amphitheater", "Main Dome", "Chapel", "East Wing", "West Wing", "South Wing", "Tahanan ng Alumni", "Tennis Court", "Gymnasium", "School Supplies and Printing Bldg.", "Printing Press", "Ninoy Aquino Library and Learning Resource Center", "Property and Supply Office Bldg", "Charlie del Rosario Bldg.", "Engineering and Research Center", "Sampaguita Canteen", "Pumping Station", "Food Tech Research Center", "FAMO", "Linear Park", "Laboratory High" }));
        getContentPane().add(sourceDrop, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 82, 230, 38));

        MainGateSouvenir.setBackground(new java.awt.Color(221, 87, 70));
        MainGateSouvenir.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateSouvenir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-Souvenir.png"))); // NOI18N
        getContentPane().add(MainGateSouvenir, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskMainGate.setBackground(new java.awt.Color(221, 87, 70));
        InfoDeskMainGate.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        InfoDeskMainGate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-InfoDesk.png"))); // NOI18N
        getContentPane().add(InfoDeskMainGate, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskLabHigh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-LabHigh.png"))); // NOI18N
        getContentPane().add(InfoDeskLabHigh, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskGym.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-Gym.png"))); // NOI18N
        getContentPane().add(InfoDeskGym, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskFoodTech.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-FoodTech.png"))); // NOI18N
        getContentPane().add(InfoDeskFoodTech, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskFAMO.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-FAMO.png"))); // NOI18N
        getContentPane().add(InfoDeskFAMO, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskEngRes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-EngRes.png"))); // NOI18N
        getContentPane().add(InfoDeskEngRes, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskEast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-East.png"))); // NOI18N
        getContentPane().add(InfoDeskEast, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskCharlie.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-Charlie.png"))); // NOI18N
        getContentPane().add(InfoDeskCharlie, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskChapel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-Chapel.png"))); // NOI18N
        getContentPane().add(InfoDeskChapel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskCHK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-CHK.png"))); // NOI18N
        getContentPane().add(InfoDeskCHK, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskAmphi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-Amphi.png"))); // NOI18N
        InfoDeskAmphi.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        getContentPane().add(InfoDeskAmphi, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskAlumni.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        InfoDeskAlumni.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-Alumni.png"))); // NOI18N
        getContentPane().add(InfoDeskAlumni, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskSouvenirShop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-Souvenir.png"))); // NOI18N
        getContentPane().add(InfoDeskSouvenirShop, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskOval.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-Oval.png"))); // NOI18N
        getContentPane().add(InfoDeskOval, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskObelisk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-Obelisk.png"))); // NOI18N
        getContentPane().add(InfoDeskObelisk, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskWestWing.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-West.png"))); // NOI18N
        getContentPane().add(InfoDeskWestWing, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskSouthWing.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        InfoDeskSouthWing.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-South.png"))); // NOI18N
        getContentPane().add(InfoDeskSouthWing, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskTennisCourt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-TennisCourt.png"))); // NOI18N
        getContentPane().add(InfoDeskTennisCourt, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskSchoolSupplies.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-SchoolSupplies.png"))); // NOI18N
        getContentPane().add(InfoDeskSchoolSupplies, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskPrintingPress.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-Printing.png"))); // NOI18N
        getContentPane().add(InfoDeskPrintingPress, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskLibrary.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-Ninoy.png"))); // NOI18N
        getContentPane().add(InfoDeskLibrary, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskVisitorsLounge.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-Visitor.png"))); // NOI18N
        getContentPane().add(InfoDeskVisitorsLounge, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskSampaguitaCanteen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-Sampaguita.png"))); // NOI18N
        getContentPane().add(InfoDeskSampaguitaCanteen, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskPumpingStation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-Pumping.png"))); // NOI18N
        getContentPane().add(InfoDeskPumpingStation, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskLinearPark.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-LinearPark.png"))); // NOI18N
        getContentPane().add(InfoDeskLinearPark, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskPropertySupply.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-Property.png"))); // NOI18N
        getContentPane().add(InfoDeskPropertySupply, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        InfoDeskNutritionFoodScience.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/InfoDesk-Nutri.png"))); // NOI18N
        getContentPane().add(InfoDeskNutritionFoodScience, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateOval.setBackground(new java.awt.Color(221, 87, 70));
        MainGateOval.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateOval.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-Oval.png"))); // NOI18N
        getContentPane().add(MainGateOval, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateCHK.setBackground(new java.awt.Color(221, 87, 70));
        MainGateCHK.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateCHK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-CHK.png"))); // NOI18N
        getContentPane().add(MainGateCHK, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGatePool.setBackground(new java.awt.Color(221, 87, 70));
        MainGatePool.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGatePool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-Pool.png"))); // NOI18N
        getContentPane().add(MainGatePool, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateLagoon.setBackground(new java.awt.Color(221, 87, 70));
        MainGateLagoon.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateLagoon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-Lagoon.png"))); // NOI18N
        getContentPane().add(MainGateLagoon, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateAmphi.setBackground(new java.awt.Color(221, 87, 70));
        MainGateAmphi.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateAmphi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-Amphi.png"))); // NOI18N
        getContentPane().add(MainGateAmphi, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateMainDome.setBackground(new java.awt.Color(221, 87, 70));
        MainGateMainDome.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateMainDome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-MainDome.png"))); // NOI18N
        getContentPane().add(MainGateMainDome, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateChapel.setBackground(new java.awt.Color(221, 87, 70));
        MainGateChapel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateChapel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-Chapel.png"))); // NOI18N
        getContentPane().add(MainGateChapel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateEast.setBackground(new java.awt.Color(221, 87, 70));
        MainGateEast.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateEast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-East.png"))); // NOI18N
        getContentPane().add(MainGateEast, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateWest.setBackground(new java.awt.Color(221, 87, 70));
        MainGateWest.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateWest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-West.png"))); // NOI18N
        getContentPane().add(MainGateWest, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateSouth.setBackground(new java.awt.Color(221, 87, 70));
        MainGateSouth.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateSouth.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-South.png"))); // NOI18N
        getContentPane().add(MainGateSouth, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateTennisCourt.setBackground(new java.awt.Color(221, 87, 70));
        MainGateTennisCourt.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateTennisCourt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-TennisCourt.png"))); // NOI18N
        getContentPane().add(MainGateTennisCourt, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateGym.setBackground(new java.awt.Color(221, 87, 70));
        MainGateGym.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateGym.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-Gym.png"))); // NOI18N
        getContentPane().add(MainGateGym, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateSchoolSupplies.setBackground(new java.awt.Color(221, 87, 70));
        MainGateSchoolSupplies.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateSchoolSupplies.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-SchoolSupplies.png"))); // NOI18N
        getContentPane().add(MainGateSchoolSupplies, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGatePrinting.setBackground(new java.awt.Color(221, 87, 70));
        MainGatePrinting.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGatePrinting.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-Printing.png"))); // NOI18N
        getContentPane().add(MainGatePrinting, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateLibrary.setBackground(new java.awt.Color(221, 87, 70));
        MainGateLibrary.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateLibrary.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-Ninoy.png"))); // NOI18N
        getContentPane().add(MainGateLibrary, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateCharlie.setBackground(new java.awt.Color(221, 87, 70));
        MainGateCharlie.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateCharlie.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-Charlie.png"))); // NOI18N
        getContentPane().add(MainGateCharlie, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateVisitor.setBackground(new java.awt.Color(221, 87, 70));
        MainGateVisitor.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateVisitor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-Visitor.png"))); // NOI18N
        getContentPane().add(MainGateVisitor, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateEngRes.setBackground(new java.awt.Color(221, 87, 70));
        MainGateEngRes.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateEngRes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-EngRes.png"))); // NOI18N
        getContentPane().add(MainGateEngRes, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateSampaguita.setBackground(new java.awt.Color(221, 87, 70));
        MainGateSampaguita.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateSampaguita.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-Sampaguita.png"))); // NOI18N
        getContentPane().add(MainGateSampaguita, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateLinearPark.setBackground(new java.awt.Color(221, 87, 70));
        MainGateLinearPark.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateLinearPark.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-Linear.png"))); // NOI18N
        getContentPane().add(MainGateLinearPark, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateNutri.setBackground(new java.awt.Color(221, 87, 70));
        MainGateNutri.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateNutri.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-Nutri.png"))); // NOI18N
        getContentPane().add(MainGateNutri, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateObelisk.setBackground(new java.awt.Color(221, 87, 70));
        MainGateObelisk.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateObelisk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-Obelisk.png"))); // NOI18N
        getContentPane().add(MainGateObelisk, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateFoodTech.setBackground(new java.awt.Color(221, 87, 70));
        MainGateFoodTech.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateFoodTech.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-FoodTech.png"))); // NOI18N
        getContentPane().add(MainGateFoodTech, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateAlumni.setBackground(new java.awt.Color(221, 87, 70));
        MainGateAlumni.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateAlumni.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-Alumni.png"))); // NOI18N
        getContentPane().add(MainGateAlumni, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateLabHigh.setBackground(new java.awt.Color(221, 87, 70));
        MainGateLabHigh.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateLabHigh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-LabHigh.png"))); // NOI18N
        getContentPane().add(MainGateLabHigh, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGatePumping.setBackground(new java.awt.Color(221, 87, 70));
        MainGatePumping.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGatePumping.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-Pumping.png"))); // NOI18N
        getContentPane().add(MainGatePumping, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        MainGateFAMO.setBackground(new java.awt.Color(221, 87, 70));
        MainGateFAMO.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MainGateFAMO.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/Paths/MainGate-FAMO.png"))); // NOI18N
        getContentPane().add(MainGateFAMO, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        frameBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puppersdaa/FrameBackgroundv2.png"))); // NOI18N
        frameBackground.setPreferredSize(new java.awt.Dimension(1240, 700));
        getContentPane().add(frameBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Get the selected values from the source and destination combo boxes
        String source = sourceDrop.getSelectedItem().toString();
        String destination = destinationDrop.getSelectedItem().toString();
        
        if (source.equals(destination)) {
            // Show an error message
            JOptionPane.showMessageDialog(this, "Source and destination cannot be the same.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (source.equals("Choose the starting location") || destination.equals("choose the destination")) {
            // Hide all path labels
            hideAllPaths();
            return;
        }
        
        // Hide all path labels initially
        hideAllPaths();

        checkAndShowPath(source, destination, "Information Desk", "Tahanan ng Alumni", InfoDeskAlumni);
        checkAndShowPath(source, destination, "Information Desk", "Amphitheater", InfoDeskAmphi);
        checkAndShowPath(source, destination, "Information Desk", "Chapel", InfoDeskChapel);
        checkAndShowPath(source, destination, "Information Desk", "Charlie del Rosario Bldg.", InfoDeskCharlie);
        checkAndShowPath(source, destination, "Information Desk", "East Wing", InfoDeskEast);
        checkAndShowPath(source, destination, "Information Desk", "Engineering and Research Center", InfoDeskEngRes);
        checkAndShowPath(source, destination, "Information Desk", "FAMO", InfoDeskFAMO);
        checkAndShowPath(source, destination, "Information Desk", "Food Tech Research Center", InfoDeskFoodTech);
        checkAndShowPath(source, destination, "Information Desk", "Gymnasium", InfoDeskGym);
        checkAndShowPath(source, destination, "Information Desk", "Laboratory High", InfoDeskLabHigh);
        checkAndShowPath(source, destination, "Information Desk", "College of Human Kinetics", InfoDeskCHK);
        checkAndShowPath(source, destination, "Information Desk", "Main Gate", InfoDeskMainGate);
        checkAndShowPath(source, destination, "Information Desk", "Souvenir Shop", InfoDeskSouvenirShop);
        checkAndShowPath(source, destination, "Information Desk", "Oval", InfoDeskOval);
        checkAndShowPath(source, destination, "Information Desk", "Obelisk", InfoDeskObelisk);
        checkAndShowPath(source, destination, "Information Desk", "West Wing", InfoDeskWestWing);
        checkAndShowPath(source, destination, "Information Desk", "South Wing", InfoDeskSouthWing);
        checkAndShowPath(source, destination, "Information Desk", "Tennis Court", InfoDeskTennisCourt);
        checkAndShowPath(source, destination, "Information Desk", "School Supplies and Printing Bldg.", InfoDeskSchoolSupplies);
        checkAndShowPath(source, destination, "Information Desk", "Printing Press", InfoDeskPrintingPress);
        checkAndShowPath(source, destination, "Information Desk", "Ninoy Aquino Library and Learning Resource Center", InfoDeskLibrary);
        checkAndShowPath(source, destination, "Information Desk", "Visitor's Lounge", InfoDeskVisitorsLounge);
        checkAndShowPath(source, destination, "Information Desk", "Sampaguita Canteen", InfoDeskSampaguitaCanteen);
        checkAndShowPath(source, destination, "Information Desk", "Pumping Station", InfoDeskPumpingStation);
        checkAndShowPath(source, destination, "Information Desk", "Linear Park", InfoDeskLinearPark);
        checkAndShowPath(source, destination, "Information Desk", "Property and Supply Office Bldg", InfoDeskPropertySupply);
        checkAndShowPath(source, destination, "Information Desk", "College of Nutrition and Food Science", InfoDeskNutritionFoodScience);
        
        checkAndShowPath(source, destination, "Main Gate", "Amphitheater", MainGateAmphi);
        checkAndShowPath(source, destination, "Main Gate", "Chapel", MainGateChapel);
        checkAndShowPath(source, destination, "Main Gate", "Charlie del Rosario Bldg.", MainGateCharlie);
        checkAndShowPath(source, destination, "Main Gate", "Souvenir Shop", MainGateSouvenir);
        checkAndShowPath(source, destination, "Main Gate", "East Wing", MainGateEast);
        checkAndShowPath(source, destination, "Main Gate", "Engineering and Research Center", MainGateEngRes);
        checkAndShowPath(source, destination, "Main Gate", "Food Tech Research Center", MainGateFoodTech);
        checkAndShowPath(source, destination, "Main Gate", "Gymnasium", MainGateGym);
        checkAndShowPath(source, destination, "Main Gate", "College of Human Kinetics", MainGateCHK);
        checkAndShowPath(source, destination, "Main Gate", "Oval", MainGateOval);
        checkAndShowPath(source, destination, "Main Gate", "West Wing", MainGateWest);
        checkAndShowPath(source, destination, "Main Gate", "South Wing", MainGateSouth);
        checkAndShowPath(source, destination, "Main Gate", "Tennis Court", MainGateTennisCourt);
        checkAndShowPath(source, destination, "Main Gate", "School Supplies and Printing Bldg.", MainGateSchoolSupplies);
        checkAndShowPath(source, destination, "Main Gate", "Printing Press", MainGatePrinting);
        checkAndShowPath(source, destination, "Main Gate", "Ninoy Aquino Library and Learning Resource Center", MainGateLibrary);
        checkAndShowPath(source, destination, "Main Gate", "Visitor's Lounge", MainGateVisitor);
        checkAndShowPath(source, destination, "Main Gate", "Linear Park", MainGateLinearPark);
        checkAndShowPath(source, destination, "Main Gate", "College of Nutrition and Food Science", MainGateNutri);
        checkAndShowPath(source, destination, "Main Gate", "Pool", MainGatePool);
        checkAndShowPath(source, destination, "Main Gate", "Lagoon", MainGateLagoon);
        checkAndShowPath(source, destination, "Main Gate", "Main Dome", MainGateMainDome);
        checkAndShowPath(source, destination, "Main Gate", "Sampaguita", MainGateSampaguita);
        checkAndShowPath(source, destination, "Main Gate", "Obelisk", MainGateObelisk);
        checkAndShowPath(source, destination, "Main Gate", "Tahanan ng Alumni", MainGateAlumni);
        checkAndShowPath(source, destination, "Main Gate", "Laboratory High", MainGateLabHigh);
        checkAndShowPath(source, destination, "Main Gate", "FAMO", MainGateFAMO);
        checkAndShowPath(source, destination, "Main Gate", "Pumping Station", MainGatePumping);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String selectedLocation = destinationDrop.getSelectedItem().toString();
        if (!selectedLocation.equals("Choose the destination")) {
            showLocationInfo(selectedLocation);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a destination first.", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String source = sourceDrop.getSelectedItem().toString();
        String destination = destinationDrop.getSelectedItem().toString();

        if (source.equals("Choose the starting location") || destination.equals("Choose the destination")) {
            JOptionPane.showMessageDialog(this, "Please select both a starting location and a destination.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (source.equals(destination)) {
            JOptionPane.showMessageDialog(this, "Source and destination cannot be the same.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String route = getRouteDescription(source, destination);
        JOptionPane.showMessageDialog(this, route, "Route from " + source + " to " + destination, JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton3ActionPerformed

    private String getRouteDescription(String source, String destination) {
        // This method will return the route description based on source and destination.
        if ((source.equals("Information Desk") && destination.equals("Main Gate")) ||
            (source.equals("Main Gate") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Main Gate";
        } else if ((source.equals("Information Desk") && destination.equals("Souvenir Shop")) ||
                   (source.equals("Souvenir Shop") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop";
        } else if ((source.equals("Information Desk") && destination.equals("Oval")) ||
                   (source.equals("Oval") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Oval";
        } else if ((source.equals("Information Desk") && destination.equals("Obelisk")) ||
                   (source.equals("Obelisk") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Obelisk";
        } else if ((source.equals("Information Desk") && destination.equals("Tennis Court")) ||
                   (source.equals("Tennis Court") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Tennis Court";
        } else if ((source.equals("Information Desk") && destination.equals("Pool")) ||
                   (source.equals("Pool") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Tennis Court -> Pool";
        } else if ((source.equals("Information Desk") && destination.equals("College of Human Kinetics")) ||
                   (source.equals("College of Human Kinetics") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Tennis Court -> Pool -> College of Human Kinetics";
        } else if ((source.equals("Information Desk") && destination.equals("Lagoon")) ||
                   (source.equals("Lagoon") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Obelisk -> Lagoon";
        } else if ((source.equals("Information Desk") && destination.equals("Amphitheater")) ||
                   (source.equals("Amphitheater") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Obelisk -> Lagoon -> Amphitheater";
        } else if ((source.equals("Information Desk") && destination.equals("Main Dome")) ||
                   (source.equals("Main Dome") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Obelisk -> Lagoon -> Amphitheater -> Main Dome";
        } else if ((source.equals("Information Desk") && destination.equals("East Wing")) ||
                   (source.equals("East Wing") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Chapel -> East Wing";
        } else if ((source.equals("Information Desk") && destination.equals("West Wing")) ||
                   (source.equals("West Wing") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Obelisk -> Lagoon -> Amphitheater -> School Supplies and Printing Bldg. -> Charlie -> Sampaguita Canteen -> West Wing";
        } else if ((source.equals("Information Desk") && destination.equals("South Wing")) ||
                   (source.equals("South Wing") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Oval -> College of Nutrition and Food Science -> FAMO -> South Wing";
        } else if ((source.equals("Information Desk") && destination.equals("Tahanan ng Alumni")) ||
                   (source.equals("Tahanan ng Alumni") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Tennis Court -> Pool -> Tahanan ng Alumni";
        } else if ((source.equals("Information Desk") && destination.equals("Visitor's Lounge")) ||
                   (source.equals("Visitor's Lounge") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Main Gate -> Visitor's Lounge";
        } else if ((source.equals("Information Desk") && destination.equals("Engineering Center")) ||
                   (source.equals("Engineering Center") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Main Gate -> Visitor's Lounge -> Engineering Center";
        } else if ((source.equals("Information Desk") && destination.equals("School Supplies and Printing Bldg.")) ||
                   (source.equals("School Supplies and Printing Bldg.") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Obelisk -> Lagoon -> Amphitheater -> School Supplies and Printing Bldg.";
        } else if ((source.equals("Information Desk") && destination.equals("Charlie")) ||
                   (source.equals("Charlie") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Obelisk -> Lagoon -> Amphitheater -> School Supplies and Printing Bldg. -> Charlie";
        } else if ((source.equals("Information Desk") && destination.equals("Linear Park")) ||
                   (source.equals("Linear Park") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Obelisk -> Lagoon -> Amphitheater -> School Supplies and Printing Bldg. -> Charlie -> Linear Park";
        } else if ((source.equals("Information Desk") && destination.equals("Laboratory High")) ||
                   (source.equals("Laboratory High") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Obelisk -> Lagoon -> Amphitheater -> School Supplies and Printing Bldg. -> Charlie -> Linear Park -> Laboratory High";
        } else if ((source.equals("Information Desk") && destination.equals("Ninoy Aquino Library and Learning Resource Center")) ||
                   (source.equals("Ninoy Aquino Library and Learning Resource Center") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Obelisk -> Lagoon -> Amphitheater -> School Supplies and Printing Bldg. -> Charlie -> Ninoy Aquino Library and Learning Resource Center";
        } else if ((source.equals("Information Desk") && destination.equals("Sampaguita Canteen")) ||
                   (source.equals("Sampaguita Canteen") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Obelisk -> Lagoon -> Amphitheater -> School Supplies and Printing Bldg. -> Charlie -> Sampaguita Canteen";
        } else if ((source.equals("Information Desk") && destination.equals("Pumping Station")) ||
                   (source.equals("Pumping Station") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Obelisk -> Lagoon -> Amphitheater -> School Supplies and Printing Bldg. -> Charlie -> Sampaguita Canteen -> West Wing -> Pumping Station";
        } else if ((source.equals("Information Desk") && destination.equals("College of Nutrition and Food Science")) ||
                   (source.equals("College of Nutrition and Food Science") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Oval -> College of Nutrition and Food Science";
        } else if ((source.equals("Information Desk") && destination.equals("Nutrition and Food Tech Research Center")) ||
                   (source.equals("Nutrition and Food Tech Research Center") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Tennis Court -> Pool -> College of Human Kinetics -> Nutrition and Food Tech Research Center";
        } else if ((source.equals("Information Desk") && destination.equals("Property and Supply Office Bldg")) ||
                   (source.equals("Property and Supply Office Bldg") && destination.equals("Information Desk"))) {
            return "Route: Information Desk -> Souvenir Shop -> Obelisk -> Lagoon -> Amphitheater -> School Supplies and Printing Bldg. -> Charlie -> Linear Park -> Laboratory High -> Property and Supply Office bldg";
        } else if ((source.equals("Main Gate") && destination.equals("Information Desk")) ||
                   (source.equals("Information Desk") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Information Desk";
        } else if ((source.equals("Main Gate") && destination.equals("Visitor's Lounge")) ||
                   (source.equals("Visitor's Lounge") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge";
        } else if ((source.equals("Main Gate") && destination.equals("Souvenir Shop")) ||
                   (source.equals("Souvenir Shop") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Souvenir Shop";
        } else if ((source.equals("Main Gate") && destination.equals("Oval")) ||
                   (source.equals("Oval") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Souvenir Shop -> Oval";
        } else if ((source.equals("Main Gate") && destination.equals("Tennis Court")) ||
                   (source.equals("Tennis Court") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Tennis Court";
        } else if ((source.equals("Main Gate") && destination.equals("Obelisk")) ||
                   (source.equals("Obelisk") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Tennis Court -> Obelisk";
        } else if ((source.equals("Main Gate") && destination.equals("Gymnasium")) ||
                   (source.equals("Gymnasium") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Gymnasium";
        } else if ((source.equals("Main Gate") && destination.equals("Pool")) ||
                   (source.equals("Pool") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Gymnasium -> Pool";
        } else if ((source.equals("Main Gate") && destination.equals("College of Human Kinetics")) ||
                   (source.equals("College of Human Kinetics") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Gymnasium -> Pool -> College of Human Kinetics";
        } else if ((source.equals("Main Gate") && destination.equals("Lagoon")) ||
                   (source.equals("Lagoon") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Tennis Court -> Obelisk -> Lagoon";
        } else if ((source.equals("Main Gate") && destination.equals("Amphitheater")) ||
                   (source.equals("Amphitheater") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Tennis Court -> Obelisk -> Lagoon -> Amphitheater";
        } else if ((source.equals("Main Gate") && destination.equals("Main Dome")) ||
                   (source.equals("Main Dome") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Tennis Court -> Obelisk -> Lagoon -> Amphitheater -> Main Dome";
        } else if ((source.equals("Main Gate") && destination.equals("Chapel")) ||
                   (source.equals("Chapel") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Souvenir Shop -> Chapel";
        } else if ((source.equals("Main Gate") && destination.equals("East Wing")) ||
                   (source.equals("East Wing") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Souvenir Shop -> Chapel -> East Wing";
        } else if ((source.equals("Main Gate") && destination.equals("West Wing")) ||
                   (source.equals("West Wing") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Tennis Court -> Obelisk -> Lagoon -> Amphitheater -> School Supplies and Printing Bldg. -> Charlie -> Sampaguita Canteen -> West Wing";
        } else if ((source.equals("Main Gate") && destination.equals("South Wing")) ||
                   (source.equals("South Wing") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Souvenir Shop -> Oval -> College of Nutrition and Food Science -> FAMO -> South Wing";
        } else if ((source.equals("Main Gate") && destination.equals("Tahanan ng Alumni")) ||
                   (source.equals("Tahanan ng Alumni") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Gymnasium -> Pool -> Tahanan ng Alumni";
        } else if ((source.equals("Main Gate") && destination.equals("Engineering Center")) ||
                   (source.equals("Engineering Center") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Engineering Center";
        } else if ((source.equals("Main Gate") && destination.equals("School Supplies and Printing Bldg.")) ||
                   (source.equals("School Supplies and Printing Bldg.") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Tennis Court -> Obelisk -> Lagoon -> Amphitheater -> School Supplies and Printing Bldg.";
        } else if ((source.equals("Main Gate") && destination.equals("Charlie")) ||
                   (source.equals("Charlie") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Tennis Court -> Obelisk -> Lagoon -> Amphitheater -> School Supplies and Printing Bldg. -> Charlie";
        } else if ((source.equals("Main Gate") && destination.equals("Linear Park")) ||
                   (source.equals("Linear Park") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Tennis Court -> Obelisk -> Lagoon -> Amphitheater -> School Supplies and Printing Bldg. -> Charlie -> Linear Park";
        } else if ((source.equals("Main Gate") && destination.equals("Laboratory High")) ||
                   (source.equals("Laboratory High") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Tennis Court -> Obelisk -> Lagoon -> Amphitheater -> School Supplies and Printing Bldg. -> Charlie -> Linear Park -> Laboratory High";
        } else if ((source.equals("Main Gate") && destination.equals("Ninoy Aquino Library and Learning Resource Center")) ||
                   (source.equals("Ninoy Aquino Library and Learning Resource Center") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Tennis Court -> Obelisk -> Lagoon -> Amphitheater -> School Supplies and Printing Bldg. -> Charlie -> Ninoy Aquino Library and Learning Resource Center";
        } else if ((source.equals("Main Gate") && destination.equals("Sampaguita Canteen")) ||
                   (source.equals("Sampaguita Canteen") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Tennis Court -> Obelisk -> Lagoon -> Amphitheater -> School Supplies and Printing Bldg. -> Charlie -> Sampaguita Canteen";
        } else if ((source.equals("Main Gate") && destination.equals("Pumping Station")) ||
                   (source.equals("Pumping Station") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Tennis Court -> Obelisk -> Lagoon -> Amphitheater -> School Supplies and Printing Bldg. -> Charlie -> Sampaguita Canteen -> West Wing -> Pumping Station";
        } else if ((source.equals("Main Gate") && destination.equals("College of Nutrition and Food Science")) ||
                   (source.equals("College of Nutrition and Food Science") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Souvenir Shop -> Oval -> College of Nutrition and Food Science";
        } else if ((source.equals("Main Gate") && destination.equals("Nutrition and Food Tech Research Center")) ||
                   (source.equals("Nutrition and Food Tech Research Center") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Gymnasium -> Pool -> College of Human Kinetics -> Nutrition and Food Tech Research Center";
        } else if ((source.equals("Main Gate") && destination.equals("Property and Supply Office Bldg")) ||
                   (source.equals("Property and Supply Office Bldg") && destination.equals("Main Gate"))) {
            return "Route: Main Gate -> Visitor's Lounge -> Tennis Court -> Obelisk -> Lagoon -> Amphitheater -> School Supplies and Printing Bldg. -> Charlie -> Linear Park -> Laboratory High -> Property and Supply Office bldg";
        } else {
            return "No route description available.";
        }
    }
    
    private void showLocationInfo(String location) {
        String info = getLocationInfo(location);
        JOptionPane.showMessageDialog(this, info, "Information: " + location, JOptionPane.INFORMATION_MESSAGE);
    }
    
    private String getLocationInfo(String location) {
        switch (location) {
            case "Main Gate":
                return "The Main Gate is the primary entrance to the university campus. It features a grand archway and is often used as a meeting point for students and visitors."
                        + "\n\nOperating Hours: 5:00 AM - 9:00 PM";
            case "Information Desk":
                return "The Information Desk is located near the main entrance. It provides assistance and guidance to visitors, students, and staff about campus facilities and events.";
            case "Visitor's Lounge \n\n Operating Hours: 5:00 AM - 9:00 PM":
                return "The Visitor's Lounge is a welcome area for guests. This is where visitors get their pass before exploring the campus.";
            case "Souvenir Shop":
                return "The Souvenir Shop sells university-branded merchandise, including clothing, accessories, and stationery. It's a great place to pick up memorabilia. "
                        + "\n\nOperating Hours: 9:00 AM - 5:00 PM";
            case "Oval":
                return "The Oval is a large open space at the heart of the campus. It's used for various outdoor activities, events, and is a popular spot for students to relax between classes. "
                        + "\n\nOperating Hours: 5:00 AM - 9:00 PM";
            case "Obelisk":
                return "A prominent monument on campus, often serving as a landmark and a symbol of the university's heritage."
                        + "\n Open Hours: ALWAYS OPEN";
            case "College of Human Kinetics":
                return "College of Human Kinetics: The academic department dedicated to the study of physical education, sports science, and related fields."
                        + "\n\nOperating Hours: 8:00 AM - 5:00 PM "
                        + "\n\nFacilities:"
                        + "\nDean's Office"
                        + "\nDepartment of Professional Programs Sound Room (Gymnasium)"
                        + "\nDepartment of Sports Science Accreditation Center"
                        + "\nLecture Rooms (2nd Floor) ";
            case "Pool":
                return "The university's swimming facility, used for both recreational swimming and athletic training."
                        + "\n\nOperating Hours: 8:00 AM - 5:00 PM";
            case "Lagoon":
                return "The university's swimming facility, used for both recreational swimming and athletic training."
                        + "\n\nOperating Hours: ALWAYS OPEN"
                        + "\n\nFacilties: Food Stalls";
            case "Amphitheater":
                return "An outdoor venue for performances, lectures, and events, designed with tiered seating for an audience."
                        + "\n\nOperating Hours: ALWAYS OPEN";
            case "Main Dome":
                return "A large, multipurpose indoor facility used for events, assemblies, and common point of the 4 main buildings in the campus."
                        + "\n\nOperating Hours: ALWAYS OPEN"
                        + "\n\nFacilties: Spiral";
            case "Chapel":
                return "A place of worship and reflection for students, staff, and visitors, offering religious services and spiritual support."
                        + "\n\nOperating Hours: 5:00 AM - 9:00 PM";
            case "East Wing":
                return "Open Hours: ALWAYS OPEN \n\nFacilities"
                        + "\n\n[5TH FLOOR]"
                        + "\n\nCollege of Accountancy Student Council Office    - Room E519 - (8:00 AM - 5:00 PM)"
                        + "\nJPIA Office - Room E500 - (8:00 AM - 5:00 PM)"
                        + "\nLecture Rooms - 5th Floor  - (ALWAYS OPEN)"
                        + "\nRestroom   - 5th Floor - (ALWAYS OPEN)"
                        + "\n\n[2ND FLOOR]"
                        + "\n\nCC Academic Research and Administration - E205 - (8:00 AM - 5:00 PM)"
                        + "\nCC Extension Services Office - E203 - (8:00 AM - 5:00 PM)"
                        + "\nCollege of Cooperatives Office - E201 - (8:00 AM - 5:00 PM)"
                        + "\nIncome Generating Project Office - E204 - (8:00 AM - 5:00 PM)"
                        + "\nNational Service Training Program Office - E202 - (8:00 AM - 5:00 PM)"
                        + "\nOffice of the Unyon ng Mga Guro sa PUP - E200 - (8:00 AM - 5:00 PM)"
                        + "\nRestroom - 2nd Floor - (ALWAYS OPEN)"
                        + "\n\n[1ST FLOOR]"
                        + "\n\nCorps of Cadets Headquarters   -   1st Floor E4  -   (8:00 AM - 5:00 PM)"
                        + "\nDental Clinic Services -   1st Floor E6  - (8:00 AM - 5:00 PM)"
                        + "\nDepartment Military Science and Tactics Office -   1st Floor E3    -   (8:00 AM - 5:00 PM)"
                        + "\nFREE - PUP Office  -   1st Floor E1    - (8:00 AM - 5:00 PM)"
                        + "\nHRD Records Office -   1st Floor E2    - (8:00 AM - 5:00 PM)"
                        + "\nMedical Clinic Services    -   1st Floor E5    -   (8:00 AM - 5:00 PM)"
                        + "\nOffice of the Director - Medical Health Services   -   1st Floor E7    - (8:00 AM - 5:00 PM)"
                        + "\nOffice of the Director - Public Affairs Office -   1st Floor E8    -   (8:00 AM - 5:00 PM)"
                        + "\nRestroom   -   1st Floor   - (ALWAYS OPEN)";
            case "West Wing":
                return "Open Hours: ALWAYS OPEN \n\nFacilities"
                        + "\n\n[5TH FLOOR]"
                        + "\n\nBayan Muna/NNARA/Gabriela Office    - Room W515 - (8:00 AM - 5:00 PM)"
                        + "\nLecture Rooms - 5th Floor  - (ALWAYS OPEN)"
                        + "\nRestroom   - 5th Floor - (ALWAYS OPEN)"
                        + "\n\n[2ND FLOOR]"
                        + "\n\nFaculty Circle - W211 - (8:00 AM - 5:00 PM)"
                        + "\nPUPFFAI Office - W203 - (8:00 AM - 5:00 PM)"
                        + "\nResearch Center - W201 - (8:00 AM - 5:00 PM)"
                        + "\nRestroom - 2nd Floor - (ALWAYS OPEN)"
                        + "\n\n[1ST FLOOR]"
                        + "\n\nAdmission and Registration Office   -   1st Floor W3  -   (8:00 AM - 5:00 PM)"
                        + "\nOffice for Scholarship and Financial Assistance -   1st Floor W4  - (8:00 AM - 5:00 PM)"
                        + "\nOffice of the University - Records Retrieval Section -   1st Floor W1    -   (8:00 AM - 5:00 PM)"
                        + "\nRestroom   -   1st Floor   - (ALWAYS OPEN)";
            case "South Wing":
                return "Open Hours: ALWAYS OPEN \n\nFacilities"
                        + "\n\n[5TH FLOOR]"
                        + "\n\nCCIS Server Room    - Room S507 - (8:00 AM - 5:00 PM)"
                        + "\nCollege of Science Accreditation Center - Room S516 - (8:00 AM - 5:00 PM)"
                        + "\n\nCollege of Science Faculty Room  -   Room S514   -   (8:00 AM - 5:00 PM)"
                        + "\n\nCurriculum Planning and Development Office   Room S506   -   (8:00 AM - 5:00 PM)"
                        + "\n\nSci-Tech Research and Development Center -   Room S512A  -   (8:00 AM - 5:00 PM)"
                        + "\nComputer Laboratories - 5th Floor  - ()"
                        + "\nRestroom   - 5th Floor - (ALWAYS OPEN)"
                        + "\n\n[2ND FLOOR]"
                        + "\n\nDr. Ofelia M. Carague Conference Room - Room S12 - (8:00 AM - 5:00 PM)"
                        + "\nDr.Pablo T. Mateo Jr. Conference Room - S2  - (8:00 AM - 5:00 PM)"
                        + "\nDr. Zenaida A. Olonan Conference Room - S5 - (8:00 AM - 5:00 PM)"
                        + "\nNetwork Operations Center - Server Room - S8 - (8:00 AM - 5:00 PM)"
                        + "\nOffice of the Executive Vice President - S6 - (8:00 AM - 5:00 PM)"
                        + "\nOffice of the President - S3 - (8:00 AM - 5:00 PM)"
                        + "\nOffice of the University Board Secretary   -   S1  -   (8:00 AM - 5:00 PM)"
                        + "\nOffice of the VP for Academic Affairs  -   S14 - (8:00 AM - 5:00 PM)"
                        + "\nOffice of the VP for Administration    -   S11 -   (8:00 AM- 5:00 PM)"
                        + "\nOffice of the VP for Finance   -   S7  -   (8:00 AM - 5:00 PM)"
                        + "\nOffice of the VP for Research, Extension and Dev't -   S13 -   (8:00 AM - 5:00 AM)"
                        + "\nOffice of the VP for Student Services  -   S10 (8:00 AM - 5:00 PM)"
                        + "\nUniversity Info. System Network Operations Center  -   S9  -   "
                        + "\nRestroom - 2nd Floor - (ALWAYS OPEN)"
                        + "\n\n[1ST FLOOR]"
                        + "\n\nAccounting Office  -   1st Floor S7  -   (8:00 AM - 5:00 PM)"
                        + "\nAccounting Division - Students Services Section -   1st Floor S8  - (8:00 AM - 5:00 PM)"
                        + "\nDepartment Military Science and Tactics Office -   1st Floor E3    -   (8:00 AM - 5:00 PM)"
                        + "\nBudget Services  -   1st Floor S4    - (8:00 AM - 5:00 PM)"
                        + "\nCashier -   1st Floor S6    - (8:00 AM - 5:00 PM)"
                        + "\nHuman Resource Management Division    -   1st Floor S3    -   (8:00 AM - 5:00 PM)"
                        + "\nOffice of the University Registrar   -   1st Floor S1    - (8:00 AM - 5:00 PM)"
                        + "\nPayroll Section -   1st Floor S9    -   (8:00 AM - 5:00 PM)"
                        + "\nProperty Extension Office  -   1st Floor S5    -   (8:00 AM - 5:00 PM)"
                        + "\nStudents' Records Office   -   1st Floor S2    -   (8:00 AM - 5:00 PM"
                        + "\nRestroom   -   1st Floor   - (ALWAYS OPEN)";
            case "Tahanan ng Alumni":
                return "A dedicated space for PUP alumni, often used for events, meetings, and gatherings of former students."
                        + "\n\nOperating Hours: 8:00AM - 5:00 PM";
            case "Tennis Court":
                return "Outdoor sports facility for tennis enthusiasts, providing a space for practice, training, and tournaments."
                        + "\n\nOperating Hours: 8:00AM - 5:00 PM";
            case "Gymnasium":
                return "A multi-purpose indoor arena used for sports activities, physical education classes, and university events."
                        + "\n\nOperating Hours: 8:00AM - 5:00 PM";
            case "School Supplies and Printing Bldg.":
                return "A convenient facility where students can purchase school supplies and access printing services."
                        + "\n\nOperating Hours: 8:00AM - 7:00 PM";
            case "Printing Press":
                return "The university’s own printing facility, responsible for producing various printed materials for academic and administrative purposes."
                        + "\n\nOperating Hours: 8:00AM - 5:00 PM";
            case "Ninoy Aquino Library and Learning Resource Center":
                return "\n\nFacilities"
                        + "\nCollege of Law"
                        + "\nReaders Services"
                        + "\nSilid Pulungan/Lakandayang (NALLRC Board Room)"
                        + "\n Multimedia Center"
                        + "\nBulwagang Balagtas"
                        + "\nFilm Viewing Room"
                        + "\nPUP Open University System"
                        + "\n\nOperating Hours: 8:00AM - 5:00 PM";
            case "Charlie del Rosario Bldg.":
                return "A building named in honor of a notable individual, housing various academic departments and classrooms."
                        + "\n\nOperating Hours: 8:00AM - 5:00 PM";
            case "Laboratory High":
                return "An educational institution within the campus that offers high school education with a focus on laboratory and research activities."
                        + "\n\nOperating Hours: 8:00AM - 5:00 PM";
            case "Engineering and Research Center":
                return "A hub for engineering students and faculty, equipped with laboratories and resources for research and development."
                        + "\n\nOperating Hours: 8:00AM - 5:00 PM";
            case "Sampaguita Canteen":
                return "A popular on-campus dining spot where students and staff can enjoy affordable meals and snacks."
                        + "\n\nOperating Hours: 8:00AM - 5:00 PM";
            case "Pumping Station":
                return "A crucial infrastructure facility managing water supply and distribution across the campus."
                        + "\n\nOperating Hours: 8:00AM - 5:00 PM";
            case "FAMO":
                return "Faculty and Management Office, this building serves as the administrative center for faculty-related activities and management."
                        + "\n\nOperating Hours: 8:00AM - 5:00 PM";
            case "Linear Park":
                return "A green space within the campus offering a relaxing environment for students and staff to unwind and enjoy the view of Pasig River."
                        + "\n\nOperating Hours: ALWAYS OPEN";
            case "Property and Supply Office Bldg.":
                return "The administrative building that handles the procurement, storage, and distribution of university supplies and property management."
                        + "\n\nOperating Hours: 8:00AM - 5:00 PM";
            case "Food Tech Research Center":
                return "A cutting-edge facility dedicated to innovative research and development in food technology and science."
                        + "\n\nOperating Hours: 8:00AM - 5:00 PM";
            default:
                return "Information about " + location + " is not available at the moment.";
        }
    }
    
    private void setupWindowListener() {
        this.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                returnToLandingPage();
            }
        });
    }

    private void returnToLandingPage() {
        LandingPage landingPage = new LandingPage();
        landingPage.setVisible(true);
        landingPage.setLocationRelativeTo(null);
        this.dispose();
    }
    
    private void hideAllPaths() {
        InfoDeskAlumni.setVisible(false);
        InfoDeskAmphi.setVisible(false);
        InfoDeskChapel.setVisible(false);
        InfoDeskCHK.setVisible(false);
        InfoDeskCharlie.setVisible(false);
        InfoDeskEast.setVisible(false);
        InfoDeskEngRes.setVisible(false);
        InfoDeskFAMO.setVisible(false);
        InfoDeskFoodTech.setVisible(false);
        InfoDeskGym.setVisible(false);
        InfoDeskLabHigh.setVisible(false);
        InfoDeskMainGate.setVisible(false);
        InfoDeskSouvenirShop.setVisible(false);
        InfoDeskOval.setVisible(false);
        InfoDeskObelisk.setVisible(false);
        InfoDeskWestWing.setVisible(false);
        InfoDeskSouthWing.setVisible(false);
        InfoDeskTennisCourt.setVisible(false);
        InfoDeskSchoolSupplies.setVisible(false);
        InfoDeskPrintingPress.setVisible(false);
        InfoDeskLibrary.setVisible(false);
        InfoDeskVisitorsLounge.setVisible(false);
        InfoDeskSampaguitaCanteen.setVisible(false);
        InfoDeskPumpingStation.setVisible(false);
        InfoDeskLinearPark.setVisible(false);
        InfoDeskPropertySupply.setVisible(false);
        InfoDeskNutritionFoodScience.setVisible(false);
        
        MainGateAmphi.setVisible(false);
        MainGateChapel.setVisible(false);
        MainGateCHK.setVisible(false);
        MainGateCharlie.setVisible(false);
        MainGateEast.setVisible(false);
        MainGateEngRes.setVisible(false);
        MainGateFoodTech.setVisible(false);
        MainGateGym.setVisible(false);
        MainGateSouvenir.setVisible(false);
        MainGateOval.setVisible(false);
        MainGateWest.setVisible(false);
        MainGateSouth.setVisible(false);
        MainGateTennisCourt.setVisible(false);
        MainGateSchoolSupplies.setVisible(false);
        MainGatePrinting.setVisible(false);
        MainGateLibrary.setVisible(false);
        MainGateVisitor.setVisible(false);
        MainGateSampaguita.setVisible(false);
        MainGateLinearPark.setVisible(false);
        MainGateNutri.setVisible(false);
        MainGatePool.setVisible(false);
        MainGateLagoon.setVisible(false);
        MainGateMainDome.setVisible(false);
        MainGateObelisk.setVisible(false);
        MainGateAlumni.setVisible(false);
        MainGateLabHigh.setVisible(false);
        MainGateFAMO.setVisible(false);
        MainGatePumping.setVisible(false);
    }
    
    private void checkAndShowPath(String source, String destination, String sourcePath, String destinationPath, javax.swing.JLabel label) {
        if ((source.equals(sourcePath) && destination.equals(destinationPath)) ||
            (source.equals(destinationPath) && destination.equals(sourcePath))) {
            label.setVisible(true);
        }
    }
    
    private void centerWindow() {
        setLocationRelativeTo(null);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UserGUI userGUI = new UserGUI();
                userGUI.setVisible(true);
                userGUI.setLocationRelativeTo(null);
            }
        });
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel InfoDeskAlumni;
    private javax.swing.JLabel InfoDeskAmphi;
    private javax.swing.JLabel InfoDeskCHK;
    private javax.swing.JLabel InfoDeskChapel;
    private javax.swing.JLabel InfoDeskCharlie;
    private javax.swing.JLabel InfoDeskEast;
    private javax.swing.JLabel InfoDeskEngRes;
    private javax.swing.JLabel InfoDeskFAMO;
    private javax.swing.JLabel InfoDeskFoodTech;
    private javax.swing.JLabel InfoDeskGym;
    private javax.swing.JLabel InfoDeskLabHigh;
    private javax.swing.JLabel InfoDeskLibrary;
    private javax.swing.JLabel InfoDeskLinearPark;
    private javax.swing.JLabel InfoDeskMainGate;
    private javax.swing.JLabel InfoDeskNutritionFoodScience;
    private javax.swing.JLabel InfoDeskObelisk;
    private javax.swing.JLabel InfoDeskOval;
    private javax.swing.JLabel InfoDeskPrintingPress;
    private javax.swing.JLabel InfoDeskPropertySupply;
    private javax.swing.JLabel InfoDeskPumpingStation;
    private javax.swing.JLabel InfoDeskSampaguitaCanteen;
    private javax.swing.JLabel InfoDeskSchoolSupplies;
    private javax.swing.JLabel InfoDeskSouthWing;
    private javax.swing.JLabel InfoDeskSouvenirShop;
    private javax.swing.JLabel InfoDeskTennisCourt;
    private javax.swing.JLabel InfoDeskVisitorsLounge;
    private javax.swing.JLabel InfoDeskWestWing;
    private javax.swing.JLabel MainGateAlumni;
    private javax.swing.JLabel MainGateAmphi;
    private javax.swing.JLabel MainGateCHK;
    private javax.swing.JLabel MainGateChapel;
    private javax.swing.JLabel MainGateCharlie;
    private javax.swing.JLabel MainGateEast;
    private javax.swing.JLabel MainGateEngRes;
    private javax.swing.JLabel MainGateFAMO;
    private javax.swing.JLabel MainGateFoodTech;
    private javax.swing.JLabel MainGateGym;
    private javax.swing.JLabel MainGateLabHigh;
    private javax.swing.JLabel MainGateLagoon;
    private javax.swing.JLabel MainGateLibrary;
    private javax.swing.JLabel MainGateLinearPark;
    private javax.swing.JLabel MainGateMainDome;
    private javax.swing.JLabel MainGateNutri;
    private javax.swing.JLabel MainGateObelisk;
    private javax.swing.JLabel MainGateOval;
    private javax.swing.JLabel MainGatePool;
    private javax.swing.JLabel MainGatePrinting;
    private javax.swing.JLabel MainGatePumping;
    private javax.swing.JLabel MainGateSampaguita;
    private javax.swing.JLabel MainGateSchoolSupplies;
    private javax.swing.JLabel MainGateSouth;
    private javax.swing.JLabel MainGateSouvenir;
    private javax.swing.JLabel MainGateTennisCourt;
    private javax.swing.JLabel MainGateVisitor;
    private javax.swing.JLabel MainGateWest;
    private javax.swing.JComboBox<String> destinationDrop;
    private javax.swing.JLabel frameBackground;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> sourceDrop;
    // End of variables declaration//GEN-END:variables

}